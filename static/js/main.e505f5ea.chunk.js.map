{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","className","alt","icon","src","country","city","temperatureMax","Math","round","temperatureMin","humidity","feelsLike","error","APIKey","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp_max","temp_min","sys","weather","feels_like","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iQAaeA,E,uKATX,OACE,6BACE,2CACA,2E,GALaC,IAAMC,WCYZC,E,uKAVX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,YACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,oD,GALWT,IAAMC,WCgCVS,E,uKA9BX,OACE,yBAAKC,UAAU,UACb,yBACEC,IAAKR,KAAKC,MAAMQ,KAChBC,IAAKV,KAAKC,MAAMQ,OAGjBT,KAAKC,MAAMU,SAAWX,KAAKC,MAAMW,MAChC,2BAAG,0BAAML,UAAU,SAAhB,aAAH,IAA6CP,KAAKC,MAAMW,KAAxD,KAAgEZ,KAAKC,MAAMU,QAA3E,KACDX,KAAKC,MAAMY,gBACV,2BAAG,0BAAMN,UAAU,SAAhB,QAAH,IAAwCO,KAAKC,MAAMf,KAAKC,MAAMY,gBAA9D,UAEDb,KAAKC,MAAMe,gBACV,2BAAG,0BAAMT,UAAU,SAAhB,QAAH,IAAwCO,KAAKC,MAAMf,KAAKC,MAAMe,gBAA9D,UAEDhB,KAAKC,MAAMgB,UACV,2BAAG,0BAAMV,UAAU,SAAhB,aAAH,IAA6CP,KAAKC,MAAMgB,UAEzDjB,KAAKC,MAAMiB,WACV,2BAAG,0BAAMX,UAAU,SAAhB,eAAH,IAA+CO,KAAKC,MAAMf,KAAKC,MAAMiB,WAArE,UAEDlB,KAAKC,MAAMkB,OAAS,uBAAGZ,UAAU,SAASP,KAAKC,MAAMkB,Y,GAvBxCvB,IAAMC,WCItBuB,G,MAAS,oCAqEAC,E,4MA/DbC,MAAQ,CACNT,oBAAgBU,EAChBP,oBAAgBO,EAChBX,UAAMW,EACNN,cAAUM,EACVd,UAAMc,EACNL,eAAWK,EACXJ,WAAOI,G,EAGTrB,W,uCAAa,WAAOsB,GAAP,mBAAAC,EAAA,6DACXD,EAAEE,iBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAFzB,SAGYC,MAAM,oDAAD,OAAqDlB,EAArD,gCAAiFQ,IAHlG,cAGLW,EAHK,gBAIQA,EAASC,OAJjB,OAILC,EAJK,OAMPrB,GACFsB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZvB,eAAgBoB,EAAKI,KAAKC,SAC1BtB,eAAgBiB,EAAKI,KAAKE,SAC1B5B,QAASsB,EAAKO,IAAI7B,QAClBC,KAAMqB,EAAK7B,KACXa,SAAUgB,EAAKI,KAAKpB,SACpBR,KAAM,oCAAsCwB,EAAKQ,QAAQ,GAAGhC,KAAO,OACnES,UAAWe,EAAKI,KAAKK,WACrBvB,MAAO,MAKT,EAAKiB,SAAS,CACZvB,oBAAgBU,EAChBP,oBAAgBO,EAChBX,UAAMW,EACNN,cAAUM,EACVd,UAAMc,EACNL,eAAWK,EACXJ,MAAO,8BA5BA,2C,6GAkCX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMjB,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACEW,eAAgBb,KAAKsB,MAAMT,eAC3BG,eAAgBhB,KAAKsB,MAAMN,eAC3BL,QAASX,KAAKsB,MAAMX,QACpBC,KAAMZ,KAAKsB,MAAMV,KACjBH,KAAMT,KAAKsB,MAAMb,KACjBS,UAAWlB,KAAKsB,MAAMJ,UACtBC,MAAOnB,KAAKsB,MAAMH,a,GAxDVvB,IAAMC,WCCJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLe,QAAQf,MAAMA,EAAMwC,a","file":"static/js/main.e505f5ea.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Weather App</h1>\n        <p>Find out the weather in your local area</p>\n      </div>\n    );\n  }\n};\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n        <button>Get Weather</button>\n      </form>\n    );\n  }\n};\n\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component {\n  render() {\n    return (\n      <div className=\"outPut\">\n        <img\n          alt={this.props.icon}\n          src={this.props.icon}\n        />\n\n        {this.props.country && this.props.city &&\n          <p><span className=\"title\">Location:</span> {this.props.city}, {this.props.country} </p>}\n        {this.props.temperatureMax &&\n          <p><span className=\"title\">Max:</span> {Math.round(this.props.temperatureMax)} ºC</p>}\n\n        {this.props.temperatureMin &&\n          <p><span className=\"title\">Min:</span> {Math.round(this.props.temperatureMin)} ºC</p>}\n\n        {this.props.humidity &&\n          <p><span className=\"title\">Humidity:</span> {this.props.humidity}</p>}\n\n        {this.props.feelsLike &&\n          <p><span className=\"title\">Feels like:</span> {Math.round(this.props.feelsLike)} ºC</p>}\n\n        {this.props.error && <p className=\"error\">{this.props.error}</p>}\n\n\n      </div>\n    );\n  }\n};\n\n\nexport default Weather;","import React from \"react\"; //import the React object from the \"react\" package\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./App.css\"\n\nconst APIKey = \"1dd19a616dc63d6585c2578c4fa4c9e3\";\n\n\n\n\nclass App extends React.Component {\n  state = {\n    temperatureMax: undefined,\n    temperatureMin: undefined,\n    city: undefined,\n    humidity: undefined,\n    icon: undefined,\n    feelsLike: undefined,\n    error: undefined,\n\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},&units=metric&APPID=${APIKey}`);\n    const data = await api_call.json();\n\n    if (city) {\n      console.log(data);\n      this.setState({\n        temperatureMax: data.main.temp_max,\n        temperatureMin: data.main.temp_min,\n        country: data.sys.country,\n        city: data.name,\n        humidity: data.main.humidity,\n        icon: \"http://openweathermap.org/img/wn/\" + data.weather[0].icon + \".png\",\n        feelsLike: data.main.feels_like,\n        error: \"\"\n\n      });\n\n    } else {\n      this.setState({\n        temperatureMax: undefined,\n        temperatureMin: undefined,\n        city: undefined,\n        humidity: undefined,\n        icon: undefined,\n        feelsLike: undefined,\n        error: \"Please enter a valid city\",\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Titles />\n        <Form getWeather={this.getWeather} />\n        <Weather\n          temperatureMax={this.state.temperatureMax}\n          temperatureMin={this.state.temperatureMin}\n          country={this.state.country}\n          city={this.state.city}\n          icon={this.state.icon}\n          feelsLike={this.state.feelsLike}\n          error={this.state.error}\n        />\n      </div >\n    );\n\n  }\n}; //creates an instance of App and that instance is extendind React.component\n\nexport default App; //makes the component available for other files to import","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //if importing a js file, we can leave out the .js extension\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}